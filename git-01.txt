Git 分布式管理代码

工作区-->   暂存区  -->    本地库
     git add   git commit    
写代码     临时存储         历史版本

Visual Studio add a new file:  shift + F2

del *.bak  			删除所有.bak文件
git push -u origin <分支名>	会记住你的当前分支，以后再push就可以直接用 git push 了！
git difftool --staged		第一次用difftool,需要先运行这个命令
安装完winmerge之后
git config --global diff.tool winmerge 就选定了默认diff工具
git difftool			之后再用difftool，以后在add前先运行这个，看看更改了哪里。
git restore --staged *.bak      撤回所有.bak文件的状态，之前add了，现在就回退到了add前的状态，且不会改变这些文件里的更改

git restore 和 git restore --staged <文件名> 区别
前者用于工作区，即add之前，可以撤销文件里的更改
后者用于暂存区，即add之后，可以将文件回退到工作区，但是不改变文件里的更改。

如果发现submodule有变化，记得运行
git submodule update
如果没有运行上述命令就commit了，想要同步更新子模块，可以用下面的命令直接远程拉取更新
git pull --recurse-submodules

git switch --detach 9c89ab8 在build/shared下直接运行这个命令，能强制HEAD detached at 9c89ab8
然后回到主folder下，运行git status会看到changes not staged for commit: modiefied: build/shared (new commits)

切换分支，但是现在分支的修改不想提交：
将当前的修改暂存起来，使用命令	git stash
只能暂存已经tracked的文件，即已经提交过的文件，而新加的文件还是不能暂存成功
想要暂存新加的文件： git stash save -u   
		   git stash --include-untracked
问题改完再回到该分支，可以使用下面命令将暂存区文件恢复
git stash pop
git stash pop stash@{1} 恢复具体的暂存区内容
查看暂存的文件
git stash list

但如果使用 git stash pop 后有冲突时，如何撤销?
可以使用 git reset --hard ，即可撤销 git stash pop 操作，将当前分支状态恢复。
而该操作后，git stash 暂存区的记录也不会被删除，可通过 git stash show 查看。



对某个文件取消跟踪
git rm --cached example.txt  删除example.txt的跟踪，并保留在本地
git rm --f example.txt 删除example.txt的跟踪，并且删除本地文件 
git rm -r --cached 文件名 删除对某个文件名的追踪，并保留在本地

保证自己的分支与远程分支一直同步
每天在ticket分支做更新操作
git merge origin
在main主分支拉取更新
git pull


删除所有没有跟踪的文件提示，这样就不会看着特别混乱了嘻嘻
git clean -f
git clean -d -f  清除未被跟踪的文件夹, 会直接删除的，小心

遇到c1083error，运行完bat文件后会出现很多新文件在submodule里面，会导致错误。
git submodule update --init --recursive


历史版本不能删除，一定有记录！

=========代码托管中心============
又叫远程库， 一般从本地库推送到远程库（push）
局域网： GitLab
互联网： GitHub
	Gitee（国内）

=========Git 常用命令=============
git config --global user.name "用户名"		设置用户签名
git config --global user.email 邮箱		设置用户邮箱
git 首次设置必须设置用户签名和邮箱，不然之后会报错

git config --list 				查看一下设置的名字
git init					初始化本地库
git status					查看本地库状态
git add <filename>				添加到暂存区
git commit -m"日志信息" <filename>		提交到本地库
git reflog					查看历史记录
git reset --hard 版本号				版本穿梭

// 放弃本地修改，强制拉取更新 法1
git restore . 用于修改了代码，但还没有add，想要重置代码
git restore <filename> 重置个别文件
git reset .  用于已经执行了git add, 代码已经暂存到了暂存区，这个步骤可以先取消暂存区变更
git restore --staged .  同上, 回退到add之前，但是文件里的更改不会删除。
git pull 拉取最新远程代码同步

//reset 回退 法2
reset 比较暴力，相当于 可适用于 代码在工作区、暂存区、仓库区等任何场景，重置后不可恢复🙅‍♂️，对于新手有一定的安全隐患。

git fetch --all
git reset --hard origin/main
git pull   // 这一步为了同步远程代码，不需要的话可不执行

//git fetch 指令是下载远程仓库最新内容，不做合并。
//git reset 指令把HEAD指向master最新版本。

//reset --hard：重置后不保留暂存区和工作区
//reset --soft：保留工作区，并把重置 HEAD 所带来的新的差异放进暂存区（此时代码的变更状态相当于执行完 git add命令）
//reset --mixed：reset的默认参数，保留工作目录，并重置暂存区（此时代码的变更状态相当于执行 git add命令之前）

 //stash 暂存（推荐）法3
我比较喜欢的方法，是用stash，暂存代码再同步。

首先，将所有代码添加至暂存区：
git add .

然后，将代码临时保存：
git stash

此时代码会重置到修改前的状态，可以同步远程仓库区，完事儿。
git pull

同步后，如果还想继续修改原来的代码，可将临时代码恢复至工作区：
git stash pop



=========初始化本地库=============
新建一个文件夹当作本地库，然后在新建的文件夹中打开 Gitbash：
git init	初始化本地库，会出现一个.git隐藏文件夹表示创建成功
git status 	查看状态



==========简单的Linux命令==========
ll
ll -a		查看
ls		查看文件夹下的文件名称
rm <filename>	删除文件
clear 		清屏
ctrl l		换页
mkdir <folder>	创建文件夹
touch <file>	创建文档
vim <file>	创建并进入编辑界面
cat <file>	read file content
cd

========用vim新增文件（hello.txt）========
vim hello.txt	进入vim并创建hello.txt
i	input
strg+einfg	copy
shift+einfg	paste
esc 	退出vim
yy	copy,只有在退出vim模式后才能用
p	paste，只有在退出vim模式后才能用
:wq	保存文件
cat hello.txt 查看文件内容
tail -n 1 hello.txt 	查看末尾行

git status 	会发现现在出现了未被追踪的文件 hello.txt 红色的

=========git add 添加到暂存区==========
git add hello.txt
git add -A .			一次添加所有改变的文件
git add -A			添加所有内容
git add .			添加新文件和编辑过的文件不包括删除的文件
git add -u 			表示添加编辑或者删除的文件，不包括新添加的文件
git status			hello.txt 变成了绿色，放到了暂存区
git rm --cached hello.txt 	rm 删除，从暂存区删除
git status


==========git commit 提交到本地库=======
会生成历史版本，不能删除
git commit -m "message" <filename>
git commit -m "message"			不添加特定文件名会提交所有改变
git status
git reflog	查看提交历史，有前7位版本号
git log 	查看详细提交信息,有用户签名和邮箱，以及完整版本号


===============修改文件==================
vim hello.txt	open hello.txt with vim
i		input
vim中可能会误触到ctrl S ，导致锁死
这时候选哟ctrl Q， 即可解除锁死状态
esc
:wq		保存
:q		强制退出不保存

修改完文件之后跟之前一样，添加到暂存区，提交到本地库
git add hello.txt
git commit -m "second version" hello.txt
cat hello.txt

===============历史版本和版本穿梭=============
底层就是移动了head指针
git reflog		查看历史精简版
git log			查看历史详细版
git reset --hard <版本号> 穿梭到第几个版本
复制ctrl einfg	粘贴 shift einfg


===============git 分支操作==================
可以同时并行做多种任务，然后做完之后再合并到一起
各个分支互不影响
分支操作:
	git switch -c ASD-1234	创建分支并切换到新分支上
	git branch -c 分支名	创建分支
	git branch -v		查看分支
	git checkout 分支名	切换分支
	git merge 分支名		把指定的分支合并到现在的分支上
	git branch -d <branchname> 删除分支

分支上创建子分支：
	git checkout -b 分支名

修改分支:	
	git branch hot-fix
	git branch -v
	git checkout hot-fix
	vim hello.txt
	i
		"edit from hot-fix"
	esc
	:wq
	git add hello.txt
	git commit hello.txt
	cat hello.txt
	这时候提交到的是hot-fix的本地库，这里面的hello.txt是变化了的
	git checkout master
	cat hello.txt
	master分支里面的hello.txt是没有受到影响的

把hot-fix 分支合并到master分支:
	先换到master分支
	git checkout master
	再合并
	git merge hot-fix


============冲突和解决冲突=============
当有人在hot-fix分支对同一个文件做了更改并提交
又有人在master分支对同一个文件做了更改并提交
这时如果想在master分支merge hot-fix分支，就会出现冲突，这时候需要人工解决冲突
git status 查看状态
vim hello.txt 进去:
	<<<<<<< HEAD
	master test
	=======
	hot-fix test
	>>>>>>> hot-fix
	
	<<<<<<<<<<<<HEAD 
	当前分支做的更改
	=============
	另一个分支做的更改
	>>>>>>>>>>>> hot-fix
直接在里面添加和删除后，保存即可:
i
	master test
	hot-fix test
:wq
这个时候把人工改好的文件再进行 add 和commit
git add hello.txt
注意，之后的commit不能带文件名，只写个信息就可以了
git commit -m "merge test"
git status
git reflog
cat hello.txt
合并成功！
只修改了master分支，对hot-fix 分支是没有影响的!


==========团队协作机制=============
	需要用代码托管中心
	     远程库
 pull	push	 clone	 push
   本地库	     本地库

团队内协作 & 跨团队协作
看图片


==========GitHub 操作==============
Repository name 最好和本地文件夹的名字一样
选择Public
Private不能超过5个人
直接创建就好了
https://github.com/yalezhang2021/Git-Tutorial-Windows.git

==========创建远程库别名=============
链接太长了，记不住，可以起一个别名，方便以后拉取和推送
git remote -v		 	 查看现在有什么别名
git remote add <别名> <链接>	 最好和库名字一致
git remote add Git-Tutorial-Windows 
注意别名只存在于该账户下
https://github.com/yalezhang2021/Git-Tutorial-Windows.git
这里会出现两个一样的别名，就是说push和pull，clone都可以用这个别名


===========git push================
推送时需要指定分支
git checkout master
git push <别名/链接> <分支名>
git push Git-Tutorial-Windows master
git push origin <分支名>

===========从远程库拉取到本地库==============
git pull <别名/链接> <分支名>
git pull Git-Tutorial-Windows master

===========clone=====================
对于不同的账户，在本地新建一个文件夹，比如Git-LHC,然后在里面打开git terminal
git clone <链接>
-克隆不需要登陆
-若使用ssh克隆需要登陆，需要先创建ssh密钥
-github可能不再支持密码，需要创建token，网上有方法

===========团队内协作==================
邀请oliver： 在github 设置界面，管理人员，邀请人，输入邮箱发送邀请链接
在oliver这一端，收到邀请链接，登上github，接受邀请即可。

现在由oliver在他的本地做改动并push到远程代码托管中心
vim hello.txt
i
"by oliver"
esc
:wq

git add hello.txt
git commit -m "oliver first commit" hello.txt
git push <链接> master
github username: name
github password: token


推送成功后，yalezhang便可以拉取：
git pull Git-Tutorial-Windows master


===========跨团队协作===============
了解一下尚硅谷bi站有讲，即可

===========生成ssh=================
有了ssh之后就不需要反复输入密码了
ssh-keygen -t rsa -C 邮箱
或
ssh-keygen
三次回车不用填写
试试看哪个行，不同系统网上搜索
然后找到.ssh文件夹
id_rsa 私钥
id_rsa.pub公钥，一般用公钥即可
cat id_rsa.pub
ctrl insert 复制
GitHub -- settings -- SSH and GPG keys --New SSH key
-- paste

=============IDEA集成Git=============
这部分在bi站 尚硅谷有很好的视频
主要适合java开发的同学
我暂时用不上，先不看了


=============GitLab=================
官网上找到 install， 对系统有要求
可以用ubuntu来装，若是windows系统的话需要虚拟机
一般是当远程仓库来用
按照官网上的指示来安装和使用即可。




===============在分支上创建分支==================
1. git switch -c MultiGuardZoneRecovery
2. in branch MultiGuardZoneRecovery:
	git push -u origin MultiGuardZoneRecovery
3. git switch -c ASD-3392
4. in branch ASD-3392
	git push -u origin ASD-3392
4.5 in branch ASD-3392
	git branch --set-upstream-to=origin/MultiGuardZoneRecovery ASD-3392
	keep update between ASD-3392 and origin/MultiGuardZoneRecovery
5.  git push origin HEAD:MultiGuardZoneRecovery
	for future HEAD is the same name
	 git push origin HEAD
6. if origin has update
	first,git switch MultiGuardZoneRecovery
	      git merge origin
	second, git switch ASD-3392
		git merge origin/MultiGuardZoneRecovery
	    or, git merge origin
	还需要验证

Setting the upstream, basically is telling your local what that branch should be called on the server. if you want to create a branch from another branch you need to do the following:

git switch -c <new-branch> [<start-point>]

Start point is optional, otherwise the start point is wherever HEAD is currently pointing

也就是说，要在一个分支上创建另一个分支
应该先建立 MultiGuardZoneRecovery
then
	git switch -c ASD-3392 MultiGuardZoneRecovery

